/*---------------------------------------------------------------------------------------------------------------------\
| Main                                                                                                                 |
| =====                                                                                                                |
|                                                                                                                      |
| + eigenes Wetter hinzugefügt                                                                                              |
\---------------------------------------------------------------------------------------------------------------------*/
void main()
{
	//INIT WEATHER BEFORE ECONOMY INIT------------------------
	Weather weather = g_Game.GetWeather();

	// === Benutze eigenes Wetter ===
	weather.MissionWeather(true);    // false = use weather controller from Weather.c
	
	// ========= EIGENES WETTER =========
	weather.GetOvercast().SetLimits( 0.0 , 1.0 );
	weather.GetRain().SetLimits( 0.0 , 1.0 );
	weather.GetFog().SetLimits( 0.0 , 0.25 );

	weather.GetOvercast().SetForecastChangeLimits( 0.5, 0.8 );
	weather.GetRain().SetForecastChangeLimits( 0.1, 0.3 );
	weather.GetFog().SetForecastChangeLimits( 0.05, 0.10 );

	weather.GetOvercast().SetForecastTimeLimits( 3600 , 3600 );
	weather.GetRain().SetForecastTimeLimits( 300 , 300 );
	weather.GetFog().SetForecastTimeLimits( 3600 , 3600 );

	weather.GetOvercast().Set( Math.RandomFloatInclusive(0.0, 0.3), 0, 0);
	weather.GetRain().Set( Math.RandomFloatInclusive(0.0, 0.2), 0, 0);
	weather.GetFog().Set( Math.RandomFloatInclusive(0.0, 0.1), 0, 0);
	
	weather.SetWindMaximumSpeed(30);
	weather.SetWindFunctionParams(0.1, 1.0, 50);

	//INIT ECONOMY--------------------------------------
	Hive ce = CreateHive();
	if ( ce )
		ce.InitOffline();

	//DATE RESET AFTER ECONOMY INIT-------------------------
	int year, month, day, hour, minute;
	int reset_month = 9, reset_day = 20;
	GetGame().GetWorld().GetDate(year, month, day, hour, minute);

	if ((month == reset_month) && (day < reset_day))
	{
		GetGame().GetWorld().SetDate(year, reset_month, reset_day, hour, minute);
	}
	else
	{
		if ((month == reset_month + 1) && (day > reset_day))
		{
			GetGame().GetWorld().SetDate(year, reset_month, reset_day, hour, minute);
		}
		else
		{
			if ((month < reset_month) || (month > reset_month + 1))
			{
				GetGame().GetWorld().SetDate(year, reset_month, reset_day, hour, minute);
			}
		}
	}
}
/*---------------------------------------------------------------------------------------------------------------------\
| Custom Mission MissionSserver                                                                                        |
| ==============================                                                                                       |
|                                                                                                                      |
| + Startkit Schraubenzieher
\---------------------------------------------------------------------------------------------------------------------*/
string newPlayerName;
class CustomMission: MissionServer
{
	void SetRandomHealth(EntityAI itemEnt)
	{
		if ( itemEnt )
		{
			float rndHlt = Math.RandomFloat( 0.45, 0.65 );
			itemEnt.SetHealth01( "", "", rndHlt );
		}
	}

	override PlayerBase CreateCharacter(PlayerIdentity identity, vector pos, ParamsReadContext ctx, string characterName)
	{
		Entity playerEnt;
		playerEnt = GetGame().CreatePlayer( identity, characterName, pos, 0, "NONE" );
		Class.CastTo( m_player, playerEnt );

		GetGame().SelectPlayer( identity, m_player );

		return m_player;
	}

	override void StartingEquipSetup(PlayerBase player, bool clothesChosen)
	{
		EntityAI itemClothing;
		EntityAI itemEnt;
		ItemBase itemBs;
		float rand;

		//=== STARTKIT Schraubenzieher ===
		itemEnt = player.GetInventory().CreateInInventory("Screwdriver");
		itemBs = ItemBase.Cast(itemEnt);
		//=================================
		itemClothing = player.FindAttachmentBySlotName( "Body" );
		if ( itemClothing )
		{
			SetRandomHealth( itemClothing );
			
			itemEnt = itemClothing.GetInventory().CreateInInventory( "Rag" );
			if ( Class.CastTo( itemBs, itemEnt ) )
				itemBs.SetQuantity( 4 );
			SetRandomHealth( itemEnt );

			string chemlightArray[] = { "Chemlight_White", "Chemlight_Yellow", "Chemlight_Green", "Chemlight_Red" };
			int rndIndex = Math.RandomInt( 0, 4 );
			itemEnt = itemClothing.GetInventory().CreateInInventory( chemlightArray[rndIndex] );
			SetRandomHealth( itemEnt );

			rand = Math.RandomFloatInclusive( 0.0, 1.0 );
			if ( rand < 0.35 )
				itemEnt = player.GetInventory().CreateInInventory( "Apple" );
			else if ( rand > 0.65 )
				itemEnt = player.GetInventory().CreateInInventory( "Pear" );
			else
				itemEnt = player.GetInventory().CreateInInventory( "Plum" );

			SetRandomHealth( itemEnt );
		}
		
		itemClothing = player.FindAttachmentBySlotName( "Legs" );
		if ( itemClothing )
			SetRandomHealth( itemClothing );
		
		itemClothing = player.FindAttachmentBySlotName( "Feet" );
	}
/*---------------------------------------------------------------------------------------------------------------------\
| Admin Tool                                                                                                           |
\---------------------------------------------------------------------------------------------------------------------*/
string cmd_prefix = "!";        // Must be special character
//-------------------------  SendMessageToPlayer  --------------------------
	void SendMessageToPlayer(PlayerBase player, string message) {
		Param1<string> param = new Param1<string>( message );
		GetGame().RPCSingleParam(player, ERPCs.RPC_USER_ACTION_MESSAGE, param, true, player.GetIdentity());
	}
//------------------------------  GetPlayer  -------------------------------
	PlayerBase GetPlayer(string name) {
		PlayerBase p;
		array<Man> players = new array<Man>; GetGame().GetPlayers(players);
		for ( int i = 0; i < players.Count(); ++i ) {
			p = players.Get(i);
			if(p.GetIdentity().GetName() == name) return p;
		}
		return NULL;
	}
//------------------------------  Befehle  -------------------------------
	override void OnEvent(EventType eventTypeId, Param params)  {
		super.OnEvent(eventTypeId,params);
		int i;
		PlayerBase player, temp_player;
		array<Man> players = new array<Man>; GetGame().GetPlayers(players);
		if(eventTypeId != ChatMessageEventTypeID) return;
		ChatMessageEventParams chat_params = ChatMessageEventParams.Cast( params );
		if(chat_params.param1 != 0 || chat_params.param2 == "") return; 
		player = GetPlayer(chat_params.param2);
		if(player == NULL) return;
		string message = chat_params.param3, prefix, param0, command;
		TStringArray tokens = new TStringArray;
		message.Split(" ", tokens); int count = tokens.Count();
		param0 = tokens.Get(0);
		param0.ParseStringEx(prefix); if(prefix != cmd_prefix) return;
		param0.ParseStringEx(command);
		switch(command) {
/* Weather & Time --------------------------------------------------------------------------------------------------------- */
			case "Regen":     { GetGame().GetWeather().GetRain().Set(0, 0, 0); for (i = 0; i < players.Count(); i++) { temp_player = players.Get(i); SendMessageToPlayer(temp_player, "Es hat aufgehört zu Regnen."); } break; }
			case "Nebel":     { GetGame().GetWeather().GetFog().Set(0, 0, 0); for (i = 0; i < players.Count(); i++) { temp_player = players.Get(i); SendMessageToPlayer(temp_player, "Der Himmel klart auf."); } break; }
			case "Gewitter":  { GetGame().GetWeather().GetOvercast().Set(0, 0, 0); for (i = 0; i < players.Count(); i++) { temp_player = players.Get(i); SendMessageToPlayer(temp_player, "Das Gewitter zieht vorüber."); } break; }
			case "Tag":       { GetGame().GetWorld().SetDate( 2020, 8, 1, 12, 00); for (i = 0; i < players.Count(); i++) { temp_player = players.Get(i); SendMessageToPlayer(temp_player, "Es wird Hell."); } break; }
			case "Nacht":     { GetGame().GetWorld().SetDate( 2020, 8, 1, 24, 00); for (i = 0; i < players.Count(); i++) { temp_player = players.Get(i); SendMessageToPlayer(temp_player, "Es wird Dunkel."); } break; }
/* Teleport & Coords ------------------------------------------------------------------------------------------------------ */
			case "goto":      { if(count != 2) { SendMessageToPlayer(player, "!goto [Spielername]");             return; } temp_player = GetPlayer(tokens[1]); if(temp_player == NULL) { SendMessageToPlayer(player, "FEHLER: Kann den Spieler '"+tokens[1]+"' nicht finden!"); } else { player.SetPosition(temp_player.GetPosition()); SendMessageToPlayer(player, "Du wurdest zu '"+tokens[1]+"' teleportiert."); } break; }
			case "here":      { if(count != 2) { SendMessageToPlayer(player, "!here [Spielername]");             return; } temp_player = GetPlayer(tokens[1]); if(temp_player == NULL) { SendMessageToPlayer(player, "FEHLER: Kann den Spieler '"+tokens[1]+"' nicht finden!"); } else { temp_player.SetPosition(player.GetPosition()); SendMessageToPlayer(temp_player, "Du wurdest zu " + player.GetIdentity().GetName() + " teleportiert."); SendMessageToPlayer(player, "Du hast '"+tokens[1]+"' zu dir Teleportiert."); } break; }
			case "tppos":     { if(count < 3)  { SendMessageToPlayer(player, "!tppos [X] [Y]");                   return; } float ATL_Z = GetGame().SurfaceY(tokens[1].ToFloat(), tokens[2].ToFloat()); vector reqpos = Vector(tokens[1].ToFloat(), ATL_Z, tokens[2].ToFloat()); temp_player = player;  temp_player.SetPosition(reqpos); SendMessageToPlayer(temp_player, "Teleportiert zu: " + reqpos ); break; }
			case "pos":       { if(count != 1) { SendMessageToPlayer(player, "!Position");                       return; } SendMessageToPlayer(player, "Deine Coordinaten: " + player.GetPosition()); break; }
/* Hilfe ------------------------------------------------------------------------------------------------------ */
			case "hife":      { SendMessageToPlayer(player, "Hilfemenü - Die folgenden Befehle stehen dir zur Verfügung:"); 
								SendMessageToPlayer(player, "!Regen         - Es wird aufhören zu Regnen"); 
								SendMessageToPlayer(player, "!Nebel         - Der Nebel zieht vorüber"); 
								SendMessageToPlayer(player, "!Gewitter      - Das Gewitter zieht vorüber");
								SendMessageToPlayer(player, "!Tag           - Es wird Tag (12 Uhr)");
								SendMessageToPlayer(player, "!Nacht         - Es wird Nacht (0 Uhr)");
								SendMessageToPlayer(player, "!goto [Name]   - Du wirst zu dem Spieler Teleportiert");
								SendMessageToPlayer(player, "!here [Name]   - Der Spieler wird zu dir Teleportiert");
								SendMessageToPlayer(player, "!tppos [X] [Y] - Teleportiert dich an die Koordinate");
								SendMessageToPlayer(player, "!pos           - Gibt deinen aktuellen Standort aus");
								break; }
			default:          { SendMessageToPlayer(player, "Unbekannter Befehl: " + command);                   break; }
		}
	}
	
};

/*---------------------------------------------------------------------------------------------------------------------\
| Create Custom Mission                                                                                                |
\---------------------------------------------------------------------------------------------------------------------*/
Mission CreateCustomMission(string path)
{
	return new CustomMission();
}